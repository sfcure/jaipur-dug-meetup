<apex:page showHeader="true" sidebar="false" controller="ReactDemoController" title="React Demo">
    <apex:includeScript value="{!URLFOR($Resource.React, 'react.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.React, 'react-dom.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.React, 'browser.min.js')}"/>
    <apex:includeScript value="https://cdnjs.cloudflare.com/ajax/libs/react-intl/1.2.2/react-intl.min.js"/>
    
    <apex:stylesheet value="{!URLFOR($Resource.slds, 'assets/styles/salesforce-lightning-design-system.min.css')}" />

    <div className="slds">
            
        <!--- React component will be mounted here -------->
        <div id="reactDemo">
            
        </div>  
    </div>

    <script type="text/babel">
        var IntlMixin = ReactIntl.IntlMixin;
        var FormattedNumber = ReactIntl.FormattedNumber;
        var FormattedDate = ReactIntl.FormattedDate;
    
    
        var OpportunityRow = React.createClass({
          render: function() {
            return (
              <tr>
                <td><a href={'{!sfInstanceUrl}'+ this.props.oppty.Id} target="_blank"><span className="slds-truncate" title="Name">{this.props.oppty.Name}</span></a></td>
                <td>{this.props.oppty.StageName}</td>
                <td><FormattedNumber value={this.props.oppty.Amount} minimumFractionDigits="2" maximumFractionDigits="2"/></td>
                <td><FormattedDate value={this.props.oppty.CloseDate} day="numeric" month="numeric" year="numeric"/></td>
                <td>{this.props.oppty.NextStep}</td>
                <td><span className="slds-truncate" title="Description">{this.props.oppty.Description}</span></td>
              </tr>
            );
          }
        });
    
    
    
        var Opportunities = React.createClass({
          getInitialState: function() {
            return {
              acctId: '',
              opptys: [],
            };
          },
    
          componentWillReceiveProps:function(props) {
            if (this.state.acctId != props.selectedAccountId) {
              this._loadOpportunities(props.selectedAccountId);
              this.setState({
                acctId: props.acctId
              });
            }
          },
    
          _loadOpportunities: function(acctId) {
            this.state.acctId = acctId;
            var t = this;
            ReactDemoController.loadOpportunities(
              acctId,
              function(result, event) {
                if (event.statusCode == 200) {
                  t.setState({
                    opptys: result
                  });
                }
              },
              {escape: false, dataType: 'json', timeout: 60000}
            );
          },
    
          render: function() {
            var opptyRows = [];
            this.state.opptys.forEach(function(o) {
              opptyRows.push(<OpportunityRow key={o.Id} oppty={o} />);
            });
    
            return (
              <table className="slds-table slds-table_bordered slds-table_cell-buffer" role="grid">
                <thead>
                    <tr className="slds-text-title_caps">
                      <th scope="col">
                        <span className="slds-truncate" title="Name">Name</span>
                      </th>
                      <th scope="col">
                        <span className="slds-truncate" title="Stage">Stage</span>
                      </th>
                      <th scope="col">
                        Amount (USD)
                      </th>
                      <th scope="col">
                        Close Date
                      </th>
                      <th scope="col">
                        Next Step
                      </th>
                      <th scope="col">
                        Description
                      </th>
                    </tr>
                </thead>
                <tbody>
                    {opptyRows}
                </tbody>
              </table>
            );
          }
        });
    
    
    
        var AccountRow = React.createClass({
          render: function() {
            return (
              <tr>
                <td className={this.props.selectedAcctCls}>
                  <a onClick={this.props._callBackLoadOpptys.bind(null, this.props.Id)} style={{cursor: 'pointer'}}>{this.props.Name}</a>
                </td>
                <td className={this.props.selectedAcctCls}>
                  <FormattedNumber value={this.props.AnnualRevenue} minimumFractionDigits="2" maximumFractionDigits="2"/>
                </td>
              </tr>
            );
          }
        });
    
    
    
        var Accounts = React.createClass({
          componentDidMount: function() {
            var t = this;
            ReactDemoController.loadAccounts(
              function(result, event) {
                if (event.statusCode == 200) {
                  t.setState({
                    accounts: result
                  });
                }
              },
              {escape: false, dataType: 'json', timeout: 60000}
            );
          },
    
          getInitialState: function() {
            return {
              accounts: [{Id: '', Name: '', AnnualRevenue: ''}],
              selectedAccountId: ''
            };
          },
    
          render: function() {
            var rows = [];
            var t = this;
            var selectedActCls = '';
            this.state.accounts.forEach(function(a) {
              selectedActCls = t.props.selectedAccountId===a.Id ? 'selAct' : '';
    
              rows.push(
                <AccountRow Name={a.Name} 
                  AnnualRevenue={a.AnnualRevenue} 
                  Id={a.Id}
                  key={a.Id}
                  selectedAcctCls={selectedActCls}
                  _callBackLoadOpptys={t.props._loadOpptysCallback}/>);
            });
    
            return (
              <div>
                <table className="slds-table slds-table_bordered slds-table_cell-buffer" role="grid">
                  <thead>
                      <tr className="slds-text-title_caps">
                        <th scope="col">Name</th>
                        <th scope="col">Annual Revenue</th>
                      </tr>
                  </thead>
                  <tbody>
                      {rows}
                  </tbody>
                </table>
              </div>
            );
          }
        });
        
    
        
        var ReactDemoApp = React.createClass({
          mixins: [IntlMixin],
    
          getInitialState: function() {
            return {
              selectedAccountId: ''
            };
          },
    
          _loadOpptys: function(accountId, e) {
            e.preventDefault();
            if (this.state.selectedAccountId != accountId) {
              this.setState({
                selectedAccountId: accountId
              });
            }
          },
    
          render: function() {
              return (
                  <div className="slds">
                        <div className="slds-page-header">
                            <div className="slds-media">
                                <div className="slds-media__figure">
                                    <span className="slds-icon_container slds-icon-standard-account">
                                        <svg className="slds-icon" aria-hidden="true">
                                            <use xmlnsXlink="http://www.w3.org/1999/xlink" xlinkHref="{!URLFOR($Resource.SLDS, '/assets/icons/standard-sprite/svg/symbols.svg#account')}"></use>
                                        </svg>
                                    </span>
                                </div>
                                <div className="slds-media__body">
                                    <h1 className="slds-page-header__title slds-truncate slds-align-middle" title="Accounts">Accounts</h1>
                                    <p className="slds-text-body_small slds-line-height_reset">All Accounts</p>
                                </div>
                            </div>
                        </div>
                        
                        <div className="slds-grid">
                            <div className="slds-size_3-of-8">
                                <div className="slds-section slds-is-open">
                                    <h3 className="slds-section__title">
                                        <span className="slds-truncate slds-p-horizontal_small" title="All Accounts">All Accounts</span>
                                    </h3>
                                    <div aria-hidden="false" className="slds-section__content">
                                        <Accounts _loadOpptysCallback={this._loadOpptys} selectedAccountId={this.state.selectedAccountId}/>
                                    </div>
                                </div>
                            </div>
                            <div className="slds-size_5-of-8 section-context">
                                <div className="slds-section slds-is-open">
                                    
                                    <div className="slds-page-header">
                                        <div className="slds-media">
                                            <div className="slds-media__figure">
                                                <span className="slds-icon_container slds-icon-standard-account">
                                                    <svg className="slds-icon" aria-hidden="true">
                                                        <use xmlnsXlink="http://www.w3.org/1999/xlink" xlinkHref="{!URLFOR($Resource.SLDS, '/assets/icons/standard-sprite/svg/symbols.svg#opportunity')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div className="slds-media__body">
                                                <h1 className="slds-page-header__title slds-truncate slds-align-middle" title="Opportunities">Opportunities</h1>
                                                <p className="slds-text-body_small slds-line-height_reset">Related Opportunities</p>
                                            </div>
                                        </div>
                                    </div>
                        
                                    <Opportunities selectedAccountId={this.state.selectedAccountId}/>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            }
        });
    
    
        ReactDOM.render(
          <ReactDemoApp />, 
          document.getElementById('reactDemo')
        );
      </script>
      
      <style>
          .section-context {
                background: rgb(244, 246, 249); 
                padding: 1rem;
            }
            .quote-list {
                padding-left: 1rem;
            }
            .padding1rem {
                padding: 1rem;    
            }
            .paddingTop1rem {
                padding-top: 1rem;    
            }
      </style>
</apex:page>